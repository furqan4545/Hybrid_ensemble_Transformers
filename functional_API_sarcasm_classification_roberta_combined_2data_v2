{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","mount_file_id":"1kK7eFoKTwpdPV8_4Sic8y0bssKevn9s8","authorship_tag":"ABX9TyN81j6Td6dQgc735Ox6U5bD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"premium","widgets":{"application/vnd.jupyter.widget-state+json":{"ba0a2c08f8c148bba5a34728356675d6":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_49782acc03774ff8a11360c2b5a47a54","IPY_MODEL_de46c03739bd463e9e51d840cc416ada","IPY_MODEL_1e302689e5a9471aac788ab42c37445b"],"layout":"IPY_MODEL_04d06a0e105444e2b80dbb73bae46e1f"}},"49782acc03774ff8a11360c2b5a47a54":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_48d21572650d4b5ebc832826ece20bab","placeholder":"​","style":"IPY_MODEL_d1c919ce6801407a811d0d8f1fcfdb98","value":"Downloading: 100%"}},"de46c03739bd463e9e51d840cc416ada":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f8bbd426dcc64941ae57d4e0304ec687","max":898823,"min":0,"orientation":"horizontal","style":"IPY_MODEL_32a5c1b934884787a8c76b9759b8d7c9","value":898823}},"1e302689e5a9471aac788ab42c37445b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_c92289ad6fba4500b2e6cdc698f67df9","placeholder":"​","style":"IPY_MODEL_d0216b3e8c4046008c1f4fb4e5411c9f","value":" 899k/899k [00:01&lt;00:00, 839kB/s]"}},"04d06a0e105444e2b80dbb73bae46e1f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"48d21572650d4b5ebc832826ece20bab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d1c919ce6801407a811d0d8f1fcfdb98":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f8bbd426dcc64941ae57d4e0304ec687":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"32a5c1b934884787a8c76b9759b8d7c9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"c92289ad6fba4500b2e6cdc698f67df9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d0216b3e8c4046008c1f4fb4e5411c9f":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"25b349fe58154f06a743baa89ccef8e9":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b9dc6b08b5924439ae70161f1b9b1345","IPY_MODEL_5107b5bd523f4fc9bc76cf2d82da5a04","IPY_MODEL_fc5aca8cd6e740afade66f161d525b53"],"layout":"IPY_MODEL_bcdd1c6d6d63402daf7aa33e4071af8e"}},"b9dc6b08b5924439ae70161f1b9b1345":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0728994cb9b849abaf4ce0ddeb1f7ba4","placeholder":"​","style":"IPY_MODEL_7750248f1473443eb876f49dc4f4c499","value":"Downloading: 100%"}},"5107b5bd523f4fc9bc76cf2d82da5a04":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_4aed1993d60f42f48a178874c34f0a95","max":456318,"min":0,"orientation":"horizontal","style":"IPY_MODEL_7da371f086c74d5cb150576614f1b41a","value":456318}},"fc5aca8cd6e740afade66f161d525b53":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2ab6d5bb974d42a1afab4af72325fb57","placeholder":"​","style":"IPY_MODEL_b366913bcca4430aa54a988635b3c1fd","value":" 456k/456k [00:01&lt;00:00, 478kB/s]"}},"bcdd1c6d6d63402daf7aa33e4071af8e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0728994cb9b849abaf4ce0ddeb1f7ba4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7750248f1473443eb876f49dc4f4c499":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"4aed1993d60f42f48a178874c34f0a95":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7da371f086c74d5cb150576614f1b41a":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"2ab6d5bb974d42a1afab4af72325fb57":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b366913bcca4430aa54a988635b3c1fd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6ae68d42e3f34399bc63d7d01bff6c38":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5f90ab51f1bd4ffc83905d97350310ee","IPY_MODEL_9efa2118c50d49cab3c7b7d523c5b6fa","IPY_MODEL_0a5a9304e10248d09b4a00024e13fc9d"],"layout":"IPY_MODEL_5ee4e8bafa484e07aaa85c6570b97539"}},"5f90ab51f1bd4ffc83905d97350310ee":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_498f87c662634943a73b4f1e8f443d7e","placeholder":"​","style":"IPY_MODEL_fa0775b9f1fa41be9ab3027008ec2a17","value":"Downloading: 100%"}},"9efa2118c50d49cab3c7b7d523c5b6fa":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_89c8aa047e0748ae92666cb54cd9a028","max":481,"min":0,"orientation":"horizontal","style":"IPY_MODEL_9d75bf0ed66c48a59be732e4d00b166d","value":481}},"0a5a9304e10248d09b4a00024e13fc9d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f7e65605c0714193a21355dba330f82e","placeholder":"​","style":"IPY_MODEL_39430db92d134d75801083e8a15f522c","value":" 481/481 [00:00&lt;00:00, 19.1kB/s]"}},"5ee4e8bafa484e07aaa85c6570b97539":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"498f87c662634943a73b4f1e8f443d7e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"fa0775b9f1fa41be9ab3027008ec2a17":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"89c8aa047e0748ae92666cb54cd9a028":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9d75bf0ed66c48a59be732e4d00b166d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"f7e65605c0714193a21355dba330f82e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"39430db92d134d75801083e8a15f522c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d6d2f8cf9fd243b68251695a17302f7c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f69f933cace04e2ba743e3e29f4085a3","IPY_MODEL_b0cdb4e5052f47359f23bea6d5fba013","IPY_MODEL_377c08ddc4c1407a8a0e2bed806aad28"],"layout":"IPY_MODEL_48e1263eace846f6920a06b005dd2fb4"}},"f69f933cace04e2ba743e3e29f4085a3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6778d8ac71924683ac5e179488d36f44","placeholder":"​","style":"IPY_MODEL_1e26077987a54b0e915cddbeebaa39d5","value":"Downloading: 100%"}},"b0cdb4e5052f47359f23bea6d5fba013":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0e80d3ab21da42e4a8698ce08ca8c7d8","max":657434796,"min":0,"orientation":"horizontal","style":"IPY_MODEL_49cb4fab9bec436fb34ee6e22ec277b9","value":657434796}},"377c08ddc4c1407a8a0e2bed806aad28":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8416a798ef28483a85a358deaf66d622","placeholder":"​","style":"IPY_MODEL_10ab47bce20446ffac517580e7e89ec5","value":" 657M/657M [00:09&lt;00:00, 68.5MB/s]"}},"48e1263eace846f6920a06b005dd2fb4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6778d8ac71924683ac5e179488d36f44":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1e26077987a54b0e915cddbeebaa39d5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0e80d3ab21da42e4a8698ce08ca8c7d8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"49cb4fab9bec436fb34ee6e22ec277b9":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8416a798ef28483a85a358deaf66d622":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"10ab47bce20446ffac517580e7e89ec5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"bpBile8xPdIA"},"outputs":[],"source":[]},{"cell_type":"code","source":["!pip install transformers\n","!pip install datasets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wuq_C7s66FL8","executionInfo":{"status":"ok","timestamp":1670613384144,"user_tz":-540,"elapsed":18308,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"1d3928eb-d844-4534-b98f-a638b115c469"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.25.1-py3-none-any.whl (5.8 MB)\n","\u001b[K     |████████████████████████████████| 5.8 MB 33.8 MB/s \n","\u001b[?25hRequirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from transformers) (21.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.8.0)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.64.1)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[K     |████████████████████████████████| 7.6 MB 40.8 MB/s \n","\u001b[?25hCollecting huggingface-hub<1.0,>=0.10.0\n","  Downloading huggingface_hub-0.11.1-py3-none-any.whl (182 kB)\n","\u001b[K     |████████████████████████████████| 182 kB 98.7 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.21.6)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.13.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0,>=0.10.0->transformers) (4.1.1)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->transformers) (3.0.9)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers) (3.10.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2022.9.24)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.11.1 tokenizers-0.13.2 transformers-4.25.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting datasets\n","  Downloading datasets-2.7.1-py3-none-any.whl (451 kB)\n","\u001b[K     |████████████████████████████████| 451 kB 17.9 MB/s \n","\u001b[?25hRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (2.23.0)\n","Collecting responses<0.19\n","  Downloading responses-0.18.0-py3-none-any.whl (38 kB)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (6.0)\n","Collecting xxhash\n","  Downloading xxhash-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n","\u001b[K     |████████████████████████████████| 212 kB 96.0 MB/s \n","\u001b[?25hRequirement already satisfied: fsspec[http]>=2021.11.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (2022.11.0)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from datasets) (4.13.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from datasets) (1.21.6)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from datasets) (1.3.5)\n","Requirement already satisfied: huggingface-hub<1.0.0,>=0.2.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.11.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from datasets) (21.3)\n","Collecting multiprocess\n","  Downloading multiprocess-0.70.14-py37-none-any.whl (115 kB)\n","\u001b[K     |████████████████████████████████| 115 kB 69.4 MB/s \n","\u001b[?25hRequirement already satisfied: aiohttp in /usr/local/lib/python3.7/dist-packages (from datasets) (3.8.3)\n","Requirement already satisfied: pyarrow>=6.0.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (9.0.0)\n","Requirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (4.64.1)\n","Requirement already satisfied: dill<0.3.7 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.3.6)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (6.0.2)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.3.3)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.0.2)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.8.1)\n","Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.1.1)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.3.1)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (2.1.1)\n","Requirement already satisfied: asynctest==0.13.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (0.13.0)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (22.1.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0.0,>=0.2.0->datasets) (3.8.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->datasets) (3.0.9)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2022.9.24)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2.10)\n","Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1\n","  Downloading urllib3-1.25.11-py2.py3-none-any.whl (127 kB)\n","\u001b[K     |████████████████████████████████| 127 kB 89.8 MB/s \n","\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->datasets) (3.10.0)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2022.6)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->datasets) (1.15.0)\n","Installing collected packages: urllib3, xxhash, responses, multiprocess, datasets\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 1.24.3\n","    Uninstalling urllib3-1.24.3:\n","      Successfully uninstalled urllib3-1.24.3\n","Successfully installed datasets-2.7.1 multiprocess-0.70.14 responses-0.18.0 urllib3-1.25.11 xxhash-3.1.0\n"]}]},{"cell_type":"markdown","source":["# **Preprocessing data**"],"metadata":{"id":"7mWggpW86JSy"}},{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","import sklearn\n","from sklearn import metrics\n","import transformers\n","from transformers import AutoTokenizer, TFAutoModelForSequenceClassification\n","import json\n","import matplotlib.pyplot as plt\n","import random\n","import seaborn as sn\n","import pandas as pd\n","import re\n","from sklearn.model_selection import train_test_split\n","import tokenizers\n","from datasets import load_dataset\n","from datasets import Dataset\n","\n","import json\n","import os \n","import sklearn\n","import seaborn as sbs\n","import sklearn.naive_bayes \n","import sklearn.model_selection\n","import sklearn.metrics\n","import pandas as pd"],"metadata":{"id":"Znr33uHB6FOp","executionInfo":{"status":"ok","timestamp":1670613387929,"user_tz":-540,"elapsed":3792,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["\n","def load_json(jfile):\n","    data = []\n","    with open(jfile) as f:\n","        for line in f.readlines():\n","            j = json.loads(line)\n","            url, headline, sarcastic = j['article_link'], j['headline'], j['is_sarcastic']\n","            data.append([url, headline, sarcastic])\n","    return pd.DataFrame(data, columns=['article_link', 'headline', 'is_sarcastic'])\n","\n","\n","def load_data_reddit(path):\n","  sarcasm_data = pd.read_csv(path)\n","  print(sarcasm_data.shape)\n","  # sarcasm_data.head()\n","  sarcasm_data.drop(['author', 'subreddit', 'score', 'ups', 'downs', 'date', 'created_utc', 'parent_comment'], axis=1, inplace=True)\n","  # remove empty rows\n","  sarcasm_data.dropna(inplace=True)\n","  # sarcasm_data.head()\n","\n","  mispell_dict = {\"ain't\": \"is not\", \"cannot\": \"can not\", \"aren't\": \"are not\", \"can't\": \"can not\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",\n","                \"doesn't\": \"does not\",\n","                \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\", \"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\",\n","                \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\", \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\", \"I'm\": \"I am\",\n","                \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\", \"i'll've\": \"i will have\", \"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n","                \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\", \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\n","                \"mightn't\": \"might not\", \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\",\n","                \"needn't've\": \"need not have\", \"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\",\n","                \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n","                \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\", \"so's\": \"so as\", \"this's\": \"this is\", \"that'd\": \"that would\",\n","                \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\", \"they'd\": \"they would\",\n","                \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\",\n","                \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\",\n","                \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\", \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\",\n","                \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n","                \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"wont\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\",\n","                \"wouldn't\": \"would not\",\n","                \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\", \"y'all'd've\": \"you all would have\", \"y'all're\": \"you all are\", \"y'all've\": \"you all have\",\n","                \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'colour': 'color',\n","                'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor',\n","                'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What',\n","                'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I',\n","                'theBest': 'the best', 'howdoes': 'how does', 'Etherium': 'Ethereum',\n","                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what',\n","                'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\n","\n","  mispell_dict = {k.lower(): v.lower() for k, v in mispell_dict.items()}\n","\n","  def preprocessing_reddit_text(s):\n","    # making our string lowercase & removing extra spaces\n","    s = str(s).lower().strip()\n","    \n","    # remove contractions.\n","    s = \" \".join([mispell_dict[word] if word in mispell_dict.keys() else word for word in s.split()])\n","    \n","    # removing \\n\n","    s = re.sub('\\n', '', s)\n","    \n","    # put spaces before & after punctuations to make words seprate. Like \"king?\" to \"king\", \"?\".\n","    s = re.sub(r\"([?!,+=—&%\\'\\\";:¿।।।|\\(\\){}\\[\\]//])\", r\" \\1 \", s)\n","    \n","    # Remove more than 2 continues spaces with 1 space.\n","    s = re.sub('[ ]{2,}', ' ', s).strip()\n","    \n","    return s\n","\n","  # apply preprocessing_text function\n","  sarcasm_data['comment'] = sarcasm_data['comment'].apply(preprocessing_reddit_text)\n","  # sarcasm_data.head()\n","\n","  sarcasm_data = sarcasm_data.dropna()\n","\n","  sarcasm_data = sarcasm_data.reset_index(drop=True)\n","  data = sarcasm_data.drop([\"label\"], axis = 1)\n","  label = sarcasm_data.drop([\"comment\"], axis = 1)\n","\n","  return data, label\n","\n","\n","def load_data_headline(path1, path2):\n","  df = load_json(path1)\n","  df2 = load_json(path2)\n","  df.is_sarcastic.value_counts(normalize=True), df.is_sarcastic.value_counts()\n","\n","  frames = [df, df2]  \n","  combine_df = pd.concat(frames)\n","\n","  combine_df.drop(['article_link'], axis=1, inplace=True)\n","  combine_df.dropna(inplace=True)\n","  \n","  mispell_dict = {\"ain't\": \"is not\", \"cannot\": \"can not\", \"aren't\": \"are not\", \"can't\": \"can not\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",\n","                \"doesn't\": \"does not\",\n","                \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\", \"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\",\n","                \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\", \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\", \"I'm\": \"I am\",\n","                \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\", \"i'll've\": \"i will have\", \"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n","                \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\", \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\n","                \"mightn't\": \"might not\", \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\",\n","                \"needn't've\": \"need not have\", \"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\",\n","                \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n","                \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\", \"so's\": \"so as\", \"this's\": \"this is\", \"that'd\": \"that would\",\n","                \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\", \"they'd\": \"they would\",\n","                \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\",\n","                \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\",\n","                \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\", \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\",\n","                \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n","                \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"wont\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\",\n","                \"wouldn't\": \"would not\",\n","                \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\", \"y'all'd've\": \"you all would have\", \"y'all're\": \"you all are\", \"y'all've\": \"you all have\",\n","                \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'colour': 'color',\n","                'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor',\n","                'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What',\n","                'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I',\n","                'theBest': 'the best', 'howdoes': 'how does', 'Etherium': 'Ethereum',\n","                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what',\n","                'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\n","  \n","  mispell_dict = {k.lower(): v.lower() for k, v in mispell_dict.items()}\n","\n","  def preprocessing_headline_text(s):\n","    # making our string lowercase & removing extra spaces\n","    s = str(s).lower().strip()\n","    \n","    # remove contractions.\n","    s = \" \".join([mispell_dict[word] if word in mispell_dict.keys() else word for word in s.split()])\n","    \n","    # removing \\n\n","    s = re.sub('\\n', '', s)\n","    \n","    # put spaces before & after punctuations to make words seprate. Like \"king?\" to \"king\", \"?\".\n","    s = re.sub(r\"([?!,+=—&%\\'\\\";:¿।।।|\\(\\){}\\[\\]//])\", r\" \\1 \", s)\n","    \n","    # Remove more than 2 continues spaces with 1 space.\n","    s = re.sub('[ ]{2,}', ' ', s).strip()\n","    \n","    return s\n","\n","  # apply preprocessing_text function\n","  combine_df['headline'] = combine_df['headline'].apply(preprocessing_headline_text)\n","  # sarcasm_data.head()\n","\n","  combine_df = combine_df.dropna()\n","\n","  combine_df = combine_df.reset_index(drop=True)\n","  data = combine_df.drop([\"is_sarcastic\"], axis = 1)\n","  label = combine_df.drop([\"headline\"], axis = 1)\n","  \n","  return data, label\n","  \n","\n","reddit_path = \"/content/drive/MyDrive/thesis_datasets/train-balanced-sarcasm.csv\"\n","json_1_headline = '/content/drive/MyDrive/thesis_datasets/Sarcasm_Headlines_Dataset.json'\n","json_2_headline = '/content/drive/MyDrive/thesis_datasets/Sarcasm_Headlines_Dataset_v2.json'\n","\n","reddit_data, reddit_label = load_data_reddit(reddit_path)\n","headline_data, headline_label = load_data_headline(json_1_headline, json_2_headline)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E58m1doU6FRI","executionInfo":{"status":"ok","timestamp":1670613406169,"user_tz":-540,"elapsed":18243,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"ce07a58e-f062-49a2-e747-fcd51156efab"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(1010826, 10)\n"]}]},{"cell_type":"markdown","source":["**splitting the data**"],"metadata":{"id":"nSxV6ZJNJeM2"}},{"cell_type":"code","source":["print(reddit_data.shape)\n","print(headline_data.shape)\n","print(reddit_label.shape)\n","print(headline_label.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pxBHEw-s6FTa","executionInfo":{"status":"ok","timestamp":1670613406170,"user_tz":-540,"elapsed":7,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"18f7080d-b241-484d-ab23-900aa8bd45b8"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["(1010773, 1)\n","(55328, 1)\n","(1010773, 1)\n","(55328, 1)\n"]}]},{"cell_type":"code","source":["train_text, val_text, train_labels, val_labels = train_test_split(reddit_data, reddit_label, test_size=0.1)"],"metadata":{"id":"uRyh6mbuH-7J","executionInfo":{"status":"ok","timestamp":1670613406171,"user_tz":-540,"elapsed":6,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["y_train = train_labels[\"label\"].to_numpy()\n","y_test = val_labels[\"label\"].to_numpy()\n","type(y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XCZauik0EJpE","executionInfo":{"status":"ok","timestamp":1670613406171,"user_tz":-540,"elapsed":6,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"fd310d46-7ceb-4570-ac9f-ed95c4b372e9"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["**Tokenizing the data**"],"metadata":{"id":"zOztdCrUJhL6"}},{"cell_type":"code","source":["from transformers import RobertaTokenizer, TFRobertaModel\n","import tensorflow as tf\n","# from transformers import DistilBertTokenizer, TFDistilBertModel\n","\n","# tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')\n","tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n","\n","train_dd = list(train_text[\"comment\"])\n","val_dd = list(val_text[\"comment\"])\n","# train_label = list(train_labels[\"label\"])\n","# val_label = list(val_labels[\"label\"])\n","\n","# train_encodings = tokenizer(train_dd, padding=\"max_length\", truncation=True, max_length = 100, return_tensors='tf')\n","# val_encodings = tokenizer(val_dd, padding=\"max_length\", truncation=True, max_length = 100, return_tensors='tf')\n","\n","# train_dataset = tf.data.Dataset.from_tensor_slices((\n","#     dict(train_encodings),\n","#     train_label\n","# ))\n","\n","# val_dataset = tf.data.Dataset.from_tensor_slices((\n","#     dict(val_encodings),\n","#     val_label\n","# ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":113,"referenced_widgets":["ba0a2c08f8c148bba5a34728356675d6","49782acc03774ff8a11360c2b5a47a54","de46c03739bd463e9e51d840cc416ada","1e302689e5a9471aac788ab42c37445b","04d06a0e105444e2b80dbb73bae46e1f","48d21572650d4b5ebc832826ece20bab","d1c919ce6801407a811d0d8f1fcfdb98","f8bbd426dcc64941ae57d4e0304ec687","32a5c1b934884787a8c76b9759b8d7c9","c92289ad6fba4500b2e6cdc698f67df9","d0216b3e8c4046008c1f4fb4e5411c9f","25b349fe58154f06a743baa89ccef8e9","b9dc6b08b5924439ae70161f1b9b1345","5107b5bd523f4fc9bc76cf2d82da5a04","fc5aca8cd6e740afade66f161d525b53","bcdd1c6d6d63402daf7aa33e4071af8e","0728994cb9b849abaf4ce0ddeb1f7ba4","7750248f1473443eb876f49dc4f4c499","4aed1993d60f42f48a178874c34f0a95","7da371f086c74d5cb150576614f1b41a","2ab6d5bb974d42a1afab4af72325fb57","b366913bcca4430aa54a988635b3c1fd","6ae68d42e3f34399bc63d7d01bff6c38","5f90ab51f1bd4ffc83905d97350310ee","9efa2118c50d49cab3c7b7d523c5b6fa","0a5a9304e10248d09b4a00024e13fc9d","5ee4e8bafa484e07aaa85c6570b97539","498f87c662634943a73b4f1e8f443d7e","fa0775b9f1fa41be9ab3027008ec2a17","89c8aa047e0748ae92666cb54cd9a028","9d75bf0ed66c48a59be732e4d00b166d","f7e65605c0714193a21355dba330f82e","39430db92d134d75801083e8a15f522c"]},"id":"uKTMExz9H-9H","executionInfo":{"status":"ok","timestamp":1670613419265,"user_tz":-540,"elapsed":13098,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"9225500c-65c0-4ac0-c48e-bb66fb7b87de"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/899k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ba0a2c08f8c148bba5a34728356675d6"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/456k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"25b349fe58154f06a743baa89ccef8e9"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/481 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6ae68d42e3f34399bc63d7d01bff6c38"}},"metadata":{}}]},{"cell_type":"markdown","source":["**Modelling Roberta**"],"metadata":{"id":"ivQtz3j3KkES"}},{"cell_type":"code","source":["import tensorflow.keras as keras \n","\n","encoder = TFRobertaModel.from_pretrained('roberta-base')\n","# encoder = TFDistilBertModel.from_pretrained(\"distilbert-base-uncased\")\n","\n","def roberta_encode(texts, tokenizer, max_len=512):\n","    all_tokens = []\n","    all_masks = []\n","    all_segments = []\n","    \n","    for text in texts:\n","        text = tokenizer.tokenize(text)\n","        # text = tokenizer(text, padding=\"max_length\", truncation=True, max_length = max_len, return_tensors='tf')\n","            \n","        text = text[:max_len-2]\n","        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n","        pad_len = max_len - len(input_sequence)\n","        \n","        tokens = tokenizer.convert_tokens_to_ids(input_sequence) + [0] * pad_len\n","        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n","        segment_ids = [0] * max_len\n","        \n","        all_tokens.append(tokens)\n","        all_masks.append(pad_masks)\n","        all_segments.append(segment_ids)\n","    \n","    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n","\n","\n","def build_model(roberta_layer, max_len=512):\n","# def build_model(distilbert_layer, max_len=100):\n","    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n","    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n","    segment_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n","    \n","    roberta_layer.trainable = False\n","    sequence_output = roberta_layer([input_word_ids, input_mask, segment_ids])\n","    # clf_output = sequence_output[:, 0, :]\n","    clf_output = sequence_output[0]\n","\n","    # input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n","    # distilbert_layer.trainable = False\n","    # sequence_output = distilbert_layer(input_word_ids)[0]\n","    # print(sequence_output.shape)\n","    # clf_output = sequence_output[:, 0, :]\n","    # clf_output = sequence_output\n","    # clf_output = sequence_output[0]\n","    # print(clf_output.shape)\n","\n","\n","    # pooled_output, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n","    # bert_layer = bert_layer\n","    # bert_layer.trainable = False\n","    # clf_output = bert_layer[:, 0, :]\n","    # clf_output = bert_layer[0]\n","\n","    net = tf.keras.layers.Bidirectional(keras.layers.GRU(246, return_sequences=True))(clf_output)\n","    net = tf.keras.layers.Dropout(0.3)(net)\n","    net = tf.keras.layers.Bidirectional(keras.layers.GRU(146))(net)\n","    net = tf.keras.layers.Dropout(0.3)(net)\n","    # net = tf.keras.layers.Conv1D(246, 1)(clf_output)\n","    # net = tf.keras.layers.Dropout(0.3)(net)\n","    # net = tf.keras.layers.Conv1D(128, 1)(net)\n","    # net = tf.keras.layers.Dropout(0.3)(net)\n","    # net = tf.keras.layers.Flatten()(net)\n","    # net = tf.keras.layers.GlobalMaxPool1D()(net)\n","    net = tf.keras.layers.Dense(124, activation='relu')(net)\n","    # net = tf.keras.layers.Dropout(0.2)(net)\n","    out = tf.keras.layers.Dense(2, activation='softmax')(net)\n","    \n","    model = tf.keras.models.Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n","    # model = tf.keras.models.Model(inputs=input_word_ids, outputs=out)\n","    model.compile(tf.keras.optimizers.Adam(lr=5e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","    \n","    return model\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156,"referenced_widgets":["d6d2f8cf9fd243b68251695a17302f7c","f69f933cace04e2ba743e3e29f4085a3","b0cdb4e5052f47359f23bea6d5fba013","377c08ddc4c1407a8a0e2bed806aad28","48e1263eace846f6920a06b005dd2fb4","6778d8ac71924683ac5e179488d36f44","1e26077987a54b0e915cddbeebaa39d5","0e80d3ab21da42e4a8698ce08ca8c7d8","49cb4fab9bec436fb34ee6e22ec277b9","8416a798ef28483a85a358deaf66d622","10ab47bce20446ffac517580e7e89ec5"]},"id":"z3oAMVIFH_At","outputId":"a7ab1fd9-96f9-477d-e678-36f336b80f5b","executionInfo":{"status":"ok","timestamp":1670613438106,"user_tz":-540,"elapsed":18851,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/657M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d6d2f8cf9fd243b68251695a17302f7c"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some layers from the model checkpoint at roberta-base were not used when initializing TFRobertaModel: ['lm_head']\n","- This IS expected if you are initializing TFRobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFRobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","All the layers of TFRobertaModel were initialized from the model checkpoint at roberta-base.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFRobertaModel for predictions without further training.\n"]}]},{"cell_type":"code","source":["max_len = 100\n","\n","X_train = roberta_encode(train_dd, tokenizer, max_len=max_len)\n","X_val = roberta_encode(val_dd, tokenizer, max_len=max_len)"],"metadata":{"id":"koe0hq_aJvxa","executionInfo":{"status":"ok","timestamp":1670613597741,"user_tz":-540,"elapsed":159644,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# build model\n","\n","model = build_model(encoder, max_len=max_len)\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QQ5YehpWJxNn","executionInfo":{"status":"ok","timestamp":1670613603224,"user_tz":-540,"elapsed":5491,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"30f29a9c-e60a-45e8-f441-ff481df9bf82"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_word_ids (InputLayer)    [(None, 100)]        0           []                               \n","                                                                                                  \n"," input_mask (InputLayer)        [(None, 100)]        0           []                               \n","                                                                                                  \n"," segment_ids (InputLayer)       [(None, 100)]        0           []                               \n","                                                                                                  \n"," tf_roberta_model (TFRobertaMod  TFBaseModelOutputWi  124645632  ['input_word_ids[0][0]',         \n"," el)                            thPoolingAndCrossAt               'input_mask[0][0]',             \n","                                tentions(last_hidde               'segment_ids[0][0]']            \n","                                n_state=(None, 100,                                               \n","                                 768),                                                            \n","                                 pooler_output=(Non                                               \n","                                e, 768),                                                          \n","                                 past_key_values=No                                               \n","                                ne, hidden_states=N                                               \n","                                one, attentions=Non                                               \n","                                e, cross_attentions                                               \n","                                =None)                                                            \n","                                                                                                  \n"," bidirectional (Bidirectional)  (None, 100, 492)     1499616     ['tf_roberta_model[0][0]']       \n","                                                                                                  \n"," dropout_37 (Dropout)           (None, 100, 492)     0           ['bidirectional[0][0]']          \n","                                                                                                  \n"," bidirectional_1 (Bidirectional  (None, 292)         560640      ['dropout_37[0][0]']             \n"," )                                                                                                \n","                                                                                                  \n"," dropout_38 (Dropout)           (None, 292)          0           ['bidirectional_1[0][0]']        \n","                                                                                                  \n"," dense (Dense)                  (None, 124)          36332       ['dropout_38[0][0]']             \n","                                                                                                  \n"," dense_1 (Dense)                (None, 2)            250         ['dense[0][0]']                  \n","                                                                                                  \n","==================================================================================================\n","Total params: 126,742,470\n","Trainable params: 2,096,838\n","Non-trainable params: 124,645,632\n","__________________________________________________________________________________________________\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizers/optimizer_v2/adam.py:110: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","source":["# training\n","\n","%%time\n","checkpoint = tf.keras.callbacks.ModelCheckpoint('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10_updated/model.h5', monitor='val_accuracy', save_best_only=True, verbose=1)\n","earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=3, verbose=1)\n","\n","train_history = model.fit(\n","    X_train, y_train,\n","    validation_data=(X_val, y_test),\n","    # validation_split=0.1,\n","    epochs=10,\n","    callbacks=[checkpoint, earlystopping],\n","    batch_size=32,\n","    verbose=1\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mTWO8X27J_Y8","executionInfo":{"status":"ok","timestamp":1668989453428,"user_tz":-540,"elapsed":18036074,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"a406d3fe-aa89-4446-b74f-83b57412bd13"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5806 - accuracy: 0.6891\n","Epoch 1: val_accuracy improved from -inf to 0.72131, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1818s 63ms/step - loss: 0.5806 - accuracy: 0.6891 - val_loss: 0.5392 - val_accuracy: 0.7213\n","Epoch 2/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5464 - accuracy: 0.7162\n","Epoch 2: val_accuracy improved from 0.72131 to 0.73694, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1802s 63ms/step - loss: 0.5464 - accuracy: 0.7162 - val_loss: 0.5221 - val_accuracy: 0.7369\n","Epoch 3/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5313 - accuracy: 0.7280\n","Epoch 3: val_accuracy improved from 0.73694 to 0.74256, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1798s 63ms/step - loss: 0.5313 - accuracy: 0.7280 - val_loss: 0.5122 - val_accuracy: 0.7426\n","Epoch 4/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5213 - accuracy: 0.7355\n","Epoch 4: val_accuracy improved from 0.74256 to 0.74913, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1796s 63ms/step - loss: 0.5213 - accuracy: 0.7355 - val_loss: 0.5058 - val_accuracy: 0.7491\n","Epoch 5/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5136 - accuracy: 0.7412\n","Epoch 5: val_accuracy improved from 0.74913 to 0.75327, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1802s 63ms/step - loss: 0.5136 - accuracy: 0.7412 - val_loss: 0.4985 - val_accuracy: 0.7533\n","Epoch 6/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5070 - accuracy: 0.7458\n","Epoch 6: val_accuracy improved from 0.75327 to 0.75565, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1802s 63ms/step - loss: 0.5070 - accuracy: 0.7458 - val_loss: 0.4959 - val_accuracy: 0.7557\n","Epoch 7/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5017 - accuracy: 0.7493\n","Epoch 7: val_accuracy improved from 0.75565 to 0.75699, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1811s 64ms/step - loss: 0.5017 - accuracy: 0.7493 - val_loss: 0.4910 - val_accuracy: 0.7570\n","Epoch 8/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.4968 - accuracy: 0.7529\n","Epoch 8: val_accuracy improved from 0.75699 to 0.75826, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1810s 64ms/step - loss: 0.4968 - accuracy: 0.7529 - val_loss: 0.4929 - val_accuracy: 0.7583\n","Epoch 9/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.4923 - accuracy: 0.7558\n","Epoch 9: val_accuracy improved from 0.75826 to 0.76021, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1796s 63ms/step - loss: 0.4923 - accuracy: 0.7558 - val_loss: 0.4883 - val_accuracy: 0.7602\n","Epoch 10/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.4887 - accuracy: 0.7585\n","Epoch 10: val_accuracy improved from 0.76021 to 0.76171, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5\n","28428/28428 [==============================] - 1797s 63ms/step - loss: 0.4887 - accuracy: 0.7585 - val_loss: 0.4892 - val_accuracy: 0.7617\n","CPU times: user 5h 30min 12s, sys: 50min 16s, total: 6h 20min 28s\n","Wall time: 5h 35s\n"]}]},{"cell_type":"markdown","source":["**Loading Model**"],"metadata":{"id":"TKruNO5IaZkJ"}},{"cell_type":"code","source":["%%time\n","model.load_weights('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/roberta/model_e10/model.h5')\n","y_preds = model.predict(X_val).round().astype(int).argmax(axis=-1)\n","print(\"Validation accuracy: \", sklearn.metrics.accuracy_score(y_test, y_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BY3tRwXMKG0e","executionInfo":{"status":"ok","timestamp":1670615230026,"user_tz":-540,"elapsed":113603,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"72b67af1-7767-47cd-e256-d6a0eda7b396"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["3159/3159 [==============================] - 676s 212ms/step\n","Validation accuracy:  0.7725123172203645\n","CPU times: user 3min 47s, sys: 45.8 s, total: 4min 33s\n","Wall time: 11min 22s\n"]}]},{"cell_type":"code","source":["# Confusion matrix\n","\n","from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(y_test, y_preds)\n","cm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kKYPUDT6bdFU","executionInfo":{"status":"ok","timestamp":1670617086880,"user_tz":-540,"elapsed":1488,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"e6292096-afc1-4416-c077-9aee45cb08b5"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[42409,  7948],\n","       [15046, 35675]])"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["print(classification_report(y_test, y_preds, target_names = ['Not Sarcastic','Sarcastic']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-ZIF5-BWbdHk","executionInfo":{"status":"ok","timestamp":1670615986389,"user_tz":-540,"elapsed":666,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"152a2160-b96a-4c15-aee8-c23f3f644e13"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["               precision    recall  f1-score   support\n","\n","Not Sarcastic       0.74      0.84      0.79     50357\n","    Sarcastic       0.82      0.70      0.76     50721\n","\n","     accuracy                           0.77    101078\n","    macro avg       0.78      0.77      0.77    101078\n"," weighted avg       0.78      0.77      0.77    101078\n","\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report"],"metadata":{"id":"sFWpyKCZbdLC","executionInfo":{"status":"ok","timestamp":1670615982265,"user_tz":-540,"elapsed":483,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","\n","plt.figure(figsize = (15,10))\n","sns.heatmap(cm, cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='')\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")"],"metadata":{"id":"-UYVfxz_KG37","colab":{"base_uri":"https://localhost:8080/","height":623},"executionInfo":{"status":"ok","timestamp":1670617120477,"user_tz":-540,"elapsed":503,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"26747b94-3432-425b-b0a3-bdbedaddfbb4"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(114.0, 0.5, 'Actual')"]},"metadata":{},"execution_count":23},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# hugging face model save\n","\n","# text_classification_model.save_weights('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distil_h5/weights.h5')"],"metadata":{"id":"se_lBORE8Nz2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Save the entire model\n","# text_classification_model.save('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilBert_model_e5/')\n","\n","# it will work\n","# model.save()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SzQLw25r0GAX","executionInfo":{"status":"ok","timestamp":1668608536910,"user_tz":-540,"elapsed":26021,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"767acd61-e0fd-4d8a-f3e5-0ee037c2dd9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f01f63e3c50>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f0207a45ad0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f02048f2b90>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f02048e05d0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f02048c92d0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f0204a2ef50>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.bidirectional.Bidirectional object at 0x7f0207b35c10>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRU object at 0x7f0207b35e50>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRU object at 0x7f0207b3c7d0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRUCell object at 0x7f0207b35f10>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRUCell object at 0x7f0207b3c950>, because it is not built.\n","WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, embeddings_layer_call_fn, embeddings_layer_call_and_return_conditional_losses, transformer_layer_call_fn while saving (showing 5 of 166). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"markdown","source":["**Load model**"],"metadata":{"id":"3gzhQn7jhewL"}},{"cell_type":"code","source":[],"metadata":{"id":"d5gklw0Gk3Vq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# model = BertModel.from_pretrained(\"./test/saved_model/\")"],"metadata":{"id":"0m9sG1eba4YA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from transformers import AutoModelForSequenceClassification\n","\n","path = \"/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/weights2\"\n","imported = tf.saved_model.load(path)\n","# model = AutoModelForSequenceClassification.from_pretrained(path)\n","\n","DEFAULT_FUNCTION_KEY = 'serving_default'\n","# loaded = tf.saved_model.load(saved_model_path)\n","inference_func = imported.signatures[DEFAULT_FUNCTION_KEY]"],"metadata":{"id":"4w3r6Ru2a4bK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# predict_dataset = eval_dataset.map(lambda image, label: image)\n","\n","for batch in val_dataset.take(1):\n","  print(inference_func(batch))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":432},"id":"ZTBbt5i5yab8","executionInfo":{"status":"error","timestamp":1668759374517,"user_tz":-540,"elapsed":316,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"b9fa0924-b6ca-4dbc-9f9c-505bc3228440"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1615\u001b[0m             return self._call_with_flat_signature(args, kwargs,\n\u001b[0;32m-> 1616\u001b[0;31m                                                   cancellation_manager)\n\u001b[0m\u001b[1;32m   1617\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_with_flat_signature\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1639\u001b[0m       raise TypeError(\n\u001b[0;32m-> 1640\u001b[0;31m           \u001b[0;34mf\"{self._flat_signature_summary()} takes {self._num_positional_args} \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1641\u001b[0m           f\"positional arguments, got {len(args)}.\")\n","\u001b[0;31mTypeError\u001b[0m: signature_wrapper(attention_mask, input_ids) takes 0 positional arguments, got 1.","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-ba12eb67e017>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mbatch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mval_dataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minference_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1600\u001b[0m       \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIf\u001b[0m \u001b[0mthe\u001b[0m \u001b[0marguments\u001b[0m \u001b[0mdo\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;31m'\u001b[0m\u001b[0ms\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1601\u001b[0m     \"\"\"\n\u001b[0;32m-> 1602\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1604\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1616\u001b[0m                                                   cancellation_manager)\n\u001b[1;32m   1617\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1618\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mstructured_err\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1619\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1620\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_with_flat_signature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1610\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1611\u001b[0m           return self._call_with_structured_signature(args, kwargs,\n\u001b[0;32m-> 1612\u001b[0;31m                                                       cancellation_manager)\n\u001b[0m\u001b[1;32m   1613\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mstructured_err\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1614\u001b[0m           \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_with_structured_signature\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1687\u001b[0m     args, kwargs, filtered_flat_args = (\n\u001b[1;32m   1688\u001b[0m         self._function_spec.canonicalize_function_inputs(*args, **kwargs))\n\u001b[0;32m-> 1689\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_structured_signature_check_missing_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1690\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_structured_signature_check_unexpected_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1691\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_structured_signature_check_arg_types\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_structured_signature_check_missing_args\u001b[0;34m(self, args, kwargs)\u001b[0m\n\u001b[1;32m   1706\u001b[0m         \u001b[0mmissing_arguments\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1707\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmissing_arguments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1708\u001b[0;31m       raise TypeError(f\"{self._structured_signature_summary()} missing \"\n\u001b[0m\u001b[1;32m   1709\u001b[0m                       \u001b[0;34m\"required arguments: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1710\u001b[0m                       f\"{', '.join(sorted(missing_arguments))}.\")\n","\u001b[0;31mTypeError\u001b[0m: signature_wrapper(*, attention_mask, input_ids) missing required arguments: attention_mask, input_ids."]}]},{"cell_type":"code","source":["for i in val_dataset.take(1):\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X8a4b5WhzgAW","executionInfo":{"status":"ok","timestamp":1668759538400,"user_tz":-540,"elapsed":2,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"2af0778b-c3f5-4653-d2b4-021f2df7a899"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["({'input_ids': <tf.Tensor: shape=(100,), dtype=int32, numpy=\n","array([  101,  2129,  8108,  2017, 10214,  2000,  2031,  3348,  2074,\n","        2138,  1996,  2060,  2711,  2003,  1037,  2450,  1010,  2008,\n","        2003,  3348,  2923,   102,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0,     0,     0,     0,     0,     0,     0,     0,     0,\n","           0], dtype=int32)>, 'attention_mask': <tf.Tensor: shape=(100,), dtype=int32, numpy=\n","array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)>}, <tf.Tensor: shape=(), dtype=int32, numpy=1>)\n"]}]},{"cell_type":"code","source":["sDEFAULT_FUNCTION_KEY = 'serving_default'\n","loaded = tf.saved_model.load(saved_model_path)\n","inference_func = loaded.signatures[DEFAULT_FUNCTION_KEY]"],"metadata":{"id":"2SZ-Gw-wyQyV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ff = inference_func(next(iter(val_dataset.batch(32)))).numpy()\n","ff.argmax(axis=-1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":432},"id":"0R-5V4QhjnEx","executionInfo":{"status":"error","timestamp":1668759568794,"user_tz":-540,"elapsed":333,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"7ab225aa-3b2d-4ae7-a925-957c8d76de6e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1615\u001b[0m             return self._call_with_flat_signature(args, kwargs,\n\u001b[0;32m-> 1616\u001b[0;31m                                                   cancellation_manager)\n\u001b[0m\u001b[1;32m   1617\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_with_flat_signature\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1639\u001b[0m       raise TypeError(\n\u001b[0;32m-> 1640\u001b[0;31m           \u001b[0;34mf\"{self._flat_signature_summary()} takes {self._num_positional_args} \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1641\u001b[0m           f\"positional arguments, got {len(args)}.\")\n","\u001b[0;31mTypeError\u001b[0m: signature_wrapper(attention_mask, input_ids) takes 0 positional arguments, got 1.","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-c8cbb63bd6a1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mff\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minference_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_dataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mff\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1600\u001b[0m       \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIf\u001b[0m \u001b[0mthe\u001b[0m \u001b[0marguments\u001b[0m \u001b[0mdo\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mmatch\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mfunction\u001b[0m\u001b[0;31m'\u001b[0m\u001b[0ms\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1601\u001b[0m     \"\"\"\n\u001b[0;32m-> 1602\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1603\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1604\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1616\u001b[0m                                                   cancellation_manager)\n\u001b[1;32m   1617\u001b[0m           \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1618\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mstructured_err\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1619\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1620\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_with_flat_signature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1610\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1611\u001b[0m           return self._call_with_structured_signature(args, kwargs,\n\u001b[0;32m-> 1612\u001b[0;31m                                                       cancellation_manager)\n\u001b[0m\u001b[1;32m   1613\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mstructured_err\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1614\u001b[0m           \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_with_structured_signature\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1687\u001b[0m     args, kwargs, filtered_flat_args = (\n\u001b[1;32m   1688\u001b[0m         self._function_spec.canonicalize_function_inputs(*args, **kwargs))\n\u001b[0;32m-> 1689\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_structured_signature_check_missing_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1690\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_structured_signature_check_unexpected_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1691\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_structured_signature_check_arg_types\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_structured_signature_check_missing_args\u001b[0;34m(self, args, kwargs)\u001b[0m\n\u001b[1;32m   1706\u001b[0m         \u001b[0mmissing_arguments\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1707\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmissing_arguments\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1708\u001b[0;31m       raise TypeError(f\"{self._structured_signature_summary()} missing \"\n\u001b[0m\u001b[1;32m   1709\u001b[0m                       \u001b[0;34m\"required arguments: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1710\u001b[0m                       f\"{', '.join(sorted(missing_arguments))}.\")\n","\u001b[0;31mTypeError\u001b[0m: signature_wrapper(*, attention_mask, input_ids) missing required arguments: attention_mask, input_ids."]}]},{"cell_type":"code","source":["# imported.predict_on_batch(next(iter(val_dataset.batch(16)))).numpy()\n","# ff = new_model(next(iter(val_dataset.batch(16)))).numpy()\n","# ff.argmax(axis=-1)\n","\n","# next(iter(val_dataset.batch(16)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"gp-NdK4oa4fm","executionInfo":{"status":"error","timestamp":1668501055076,"user_tz":-540,"elapsed":1508,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"e5747139-46dd-4294-c734-cfe2c1b60f7f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-268ddd4147d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mimported\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_on_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_dataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m# ff = new_model(next(iter(val_dataset.batch(16)))).numpy()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# ff.argmax(axis=-1)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# next(iter(val_dataset.batch(16)))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: '_UserObject' object has no attribute 'predict_on_batch'"]}]},{"cell_type":"code","source":["path = \"/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/weights/\"\n","model = tf.keras.models.load_model(path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":328},"id":"-Ir185RFa4jG","executionInfo":{"status":"error","timestamp":1668500364772,"user_tz":-540,"elapsed":11195,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"d7b2395a-7623-4a0e-926b-0a9a7d365bc9"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-6f7daa9f9863>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/weights/\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/saving/saved_model/load.py\u001b[0m in \u001b[0;36mcommon_spec\u001b[0;34m(x, y)\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m       \u001b[0;31m# Please file a bug if you are being hindered by this error.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'No common supertype of {x} and {y}.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: No common supertype of TensorSpec(shape=(None, None), dtype=tf.int64, name=None) and TensorSpec(shape=(None, 100), dtype=tf.int32, name='input_ids/attention_mask')."]}]},{"cell_type":"code","source":[],"metadata":{"id":"_KUOt2yo6FVs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"q_3GYKOK6FYS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KvRaymJu6Fay"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nNw1S0Jm6Fc9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"fTSzj1F06FfP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lQSiPFAd6FhN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"URohonso6FjJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lmXecIhs6Fm9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7EUOOSRn6Fo8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"p6Gq50fr6Fsb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"e8WzNWhjb011"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"OWkoZSuAb05D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6R4oWfbtb07q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"4UtIQhMRb0_I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"V96zQzWrb1Ep"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WoKXCCqOb1Ik"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ko6_zmyTb1L7"},"execution_count":null,"outputs":[]}]}