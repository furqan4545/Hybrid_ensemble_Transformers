{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","mount_file_id":"1lPF9_vyxsmDxxliIpHI8gh3AytugNMiH","authorship_tag":"ABX9TyP1aHUGQxOuENnCyphYQ7S2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"premium","widgets":{"application/vnd.jupyter.widget-state+json":{"948b704c06314c3393be46492b794f45":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_bc1f12921be94d638381b3e1e9790df7","IPY_MODEL_40d2a8398fd84ab4aff220829d984cc2","IPY_MODEL_1aac5553a50c437b977886bdbe865384"],"layout":"IPY_MODEL_e4337c706a8d4989a4f8d23df808687f"}},"bc1f12921be94d638381b3e1e9790df7":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_4e3aa40e0d8b400d84a4ac8eadd55d2c","placeholder":"​","style":"IPY_MODEL_22262c3e536c4b7eb036019a2e2ad66e","value":"Downloading: 100%"}},"40d2a8398fd84ab4aff220829d984cc2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b8347df08df44926ab6b35d56b59aa1e","max":231508,"min":0,"orientation":"horizontal","style":"IPY_MODEL_6d9fb4f84deb4b0ba736c34e8cc963e0","value":231508}},"1aac5553a50c437b977886bdbe865384":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_34a88ce7e25c4fefb566a3adc7c4b6ed","placeholder":"​","style":"IPY_MODEL_c56df3229f7340b4842094ae682dc5cd","value":" 232k/232k [00:00&lt;00:00, 281kB/s]"}},"e4337c706a8d4989a4f8d23df808687f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4e3aa40e0d8b400d84a4ac8eadd55d2c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"22262c3e536c4b7eb036019a2e2ad66e":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b8347df08df44926ab6b35d56b59aa1e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6d9fb4f84deb4b0ba736c34e8cc963e0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"34a88ce7e25c4fefb566a3adc7c4b6ed":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c56df3229f7340b4842094ae682dc5cd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c0887566381842eaa04e2aa0a6ef086f":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_2f82e739afc4444cafdc6d225daae1fd","IPY_MODEL_39c6a5ecd0e94ff1b6b69652b38a30b1","IPY_MODEL_5de703b2050e45258e00a7e3aa3d0db5"],"layout":"IPY_MODEL_1486136d7934482ea7aed82464f3fc7e"}},"2f82e739afc4444cafdc6d225daae1fd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8deae203fd8843238f750ce834d92c69","placeholder":"​","style":"IPY_MODEL_72b3d067b854465f9d1d890da7da3ee8","value":"Downloading: 100%"}},"39c6a5ecd0e94ff1b6b69652b38a30b1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_32d5d0a7a3814759b82ab71e1c3b4707","max":28,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c53ef5d8f2f6482b97b0b96d2f55cf0d","value":28}},"5de703b2050e45258e00a7e3aa3d0db5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a9683189319a438daf35364c418faf9b","placeholder":"​","style":"IPY_MODEL_9d62ae2fb70c42159f97f360068ff71b","value":" 28.0/28.0 [00:00&lt;00:00, 1.09kB/s]"}},"1486136d7934482ea7aed82464f3fc7e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8deae203fd8843238f750ce834d92c69":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"72b3d067b854465f9d1d890da7da3ee8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"32d5d0a7a3814759b82ab71e1c3b4707":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c53ef5d8f2f6482b97b0b96d2f55cf0d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a9683189319a438daf35364c418faf9b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9d62ae2fb70c42159f97f360068ff71b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"912a429e4cda48cf8d9329938b93f202":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ab61975341b342eab0002cc5ec64c2f5","IPY_MODEL_a34a0567fade4966a3e773e0b4e5cb47","IPY_MODEL_971a3236112242a6a8561e8dbe2e21cd"],"layout":"IPY_MODEL_c85b954ca400496aa11c6dbc25ba8f4b"}},"ab61975341b342eab0002cc5ec64c2f5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_53b4e801036842de82d0721f5ff92b42","placeholder":"​","style":"IPY_MODEL_5f21321955f84a19a7d26bfcb6a54b82","value":"Downloading: 100%"}},"a34a0567fade4966a3e773e0b4e5cb47":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6ff93386c00e4075a43395ad67d40c36","max":483,"min":0,"orientation":"horizontal","style":"IPY_MODEL_aa310a6893ca4fd692d0d8caa755fd04","value":483}},"971a3236112242a6a8561e8dbe2e21cd":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_95650a6e72fb4d4a8f9111d82f35d524","placeholder":"​","style":"IPY_MODEL_cfaef0c84e7b4e878f1bf6940f05d8ac","value":" 483/483 [00:00&lt;00:00, 19.9kB/s]"}},"c85b954ca400496aa11c6dbc25ba8f4b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"53b4e801036842de82d0721f5ff92b42":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5f21321955f84a19a7d26bfcb6a54b82":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6ff93386c00e4075a43395ad67d40c36":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aa310a6893ca4fd692d0d8caa755fd04":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"95650a6e72fb4d4a8f9111d82f35d524":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cfaef0c84e7b4e878f1bf6940f05d8ac":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b74b3923f41a4122a1cd8c192e5a5e7b":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_393ca186fa684b07ab6970e7e613ae0e","IPY_MODEL_39a99a5f5798474c9b10223d6d2c5df1","IPY_MODEL_2505947f6cd441ab8d41ebd1a3062ef9"],"layout":"IPY_MODEL_b3ae031ad57946bc918e917ecffaaf89"}},"393ca186fa684b07ab6970e7e613ae0e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6e80145e0665461c86bfe441675c00f5","placeholder":"​","style":"IPY_MODEL_b125922becd344b491afb7abe7032ae7","value":"Downloading: 100%"}},"39a99a5f5798474c9b10223d6d2c5df1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_cd7f47e6262d4f96b4cb1806897aff04","max":363423424,"min":0,"orientation":"horizontal","style":"IPY_MODEL_176ff7802dd84096883864bb2ee524f8","value":363423424}},"2505947f6cd441ab8d41ebd1a3062ef9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bcdd6803e3724b8e83733032f9546640","placeholder":"​","style":"IPY_MODEL_39f257fb1b144fa1ac87a0b927b8a1ed","value":" 363M/363M [00:05&lt;00:00, 66.6MB/s]"}},"b3ae031ad57946bc918e917ecffaaf89":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6e80145e0665461c86bfe441675c00f5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b125922becd344b491afb7abe7032ae7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"cd7f47e6262d4f96b4cb1806897aff04":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"176ff7802dd84096883864bb2ee524f8":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bcdd6803e3724b8e83733032f9546640":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"39f257fb1b144fa1ac87a0b927b8a1ed":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"bpBile8xPdIA"},"outputs":[],"source":[]},{"cell_type":"code","source":["!pip install transformers\n","!pip install datasets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wuq_C7s66FL8","executionInfo":{"status":"ok","timestamp":1670617773416,"user_tz":-540,"elapsed":17837,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"b97fbe3d-5f25-450f-c049-d7cf195874cd"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.25.1-py3-none-any.whl (5.8 MB)\n","\u001b[K     |████████████████████████████████| 5.8 MB 32.8 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.21.6)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.64.1)\n","Collecting huggingface-hub<1.0,>=0.10.0\n","  Downloading huggingface_hub-0.11.1-py3-none-any.whl (182 kB)\n","\u001b[K     |████████████████████████████████| 182 kB 93.1 MB/s \n","\u001b[?25hCollecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[K     |████████████████████████████████| 7.6 MB 92.8 MB/s \n","\u001b[?25hRequirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.13.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from transformers) (21.3)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.8.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0,>=0.10.0->transformers) (4.1.1)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->transformers) (3.0.9)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers) (3.10.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2022.9.24)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.11.1 tokenizers-0.13.2 transformers-4.25.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting datasets\n","  Downloading datasets-2.7.1-py3-none-any.whl (451 kB)\n","\u001b[K     |████████████████████████████████| 451 kB 34.0 MB/s \n","\u001b[?25hRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (2.23.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from datasets) (1.21.6)\n","Collecting responses<0.19\n","  Downloading responses-0.18.0-py3-none-any.whl (38 kB)\n","Requirement already satisfied: fsspec[http]>=2021.11.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (2022.11.0)\n","Requirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (4.64.1)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from datasets) (6.0)\n","Collecting xxhash\n","  Downloading xxhash-3.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (212 kB)\n","\u001b[K     |████████████████████████████████| 212 kB 98.4 MB/s \n","\u001b[?25hRequirement already satisfied: dill<0.3.7 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.3.6)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from datasets) (21.3)\n","Requirement already satisfied: huggingface-hub<1.0.0,>=0.2.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (0.11.1)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.7/dist-packages (from datasets) (3.8.3)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from datasets) (4.13.0)\n","Collecting multiprocess\n","  Downloading multiprocess-0.70.14-py37-none-any.whl (115 kB)\n","\u001b[K     |████████████████████████████████| 115 kB 89.2 MB/s \n","\u001b[?25hRequirement already satisfied: pyarrow>=6.0.0 in /usr/local/lib/python3.7/dist-packages (from datasets) (9.0.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from datasets) (1.3.5)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.3.1)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.0.2)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (6.0.2)\n","Requirement already satisfied: asynctest==0.13.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (0.13.0)\n","Requirement already satisfied: typing-extensions>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (4.1.1)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (22.1.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.3.3)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (2.1.1)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.7/dist-packages (from aiohttp->datasets) (1.8.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0.0,>=0.2.0->datasets) (3.8.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->datasets) (3.0.9)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2022.9.24)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests>=2.19.0->datasets) (2.10)\n","Collecting urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1\n","  Downloading urllib3-1.25.11-py2.py3-none-any.whl (127 kB)\n","\u001b[K     |████████████████████████████████| 127 kB 93.2 MB/s \n","\u001b[?25hRequirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->datasets) (3.10.0)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->datasets) (2022.6)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas->datasets) (1.15.0)\n","Installing collected packages: urllib3, xxhash, responses, multiprocess, datasets\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 1.24.3\n","    Uninstalling urllib3-1.24.3:\n","      Successfully uninstalled urllib3-1.24.3\n","Successfully installed datasets-2.7.1 multiprocess-0.70.14 responses-0.18.0 urllib3-1.25.11 xxhash-3.1.0\n"]}]},{"cell_type":"markdown","source":["# **Preprocessing data**"],"metadata":{"id":"7mWggpW86JSy"}},{"cell_type":"code","source":["import tensorflow as tf\n","import numpy as np\n","import sklearn\n","from sklearn import metrics\n","import transformers\n","from transformers import AutoTokenizer, TFAutoModelForSequenceClassification\n","import json\n","import matplotlib.pyplot as plt\n","import random\n","import seaborn as sn\n","import pandas as pd\n","import re\n","from sklearn.model_selection import train_test_split\n","import tokenizers\n","from datasets import load_dataset\n","from datasets import Dataset\n","\n","import json\n","import os \n","import sklearn\n","import seaborn as sbs\n","import sklearn.naive_bayes \n","import sklearn.model_selection\n","import sklearn.metrics\n","import pandas as pd"],"metadata":{"id":"Znr33uHB6FOp","executionInfo":{"status":"ok","timestamp":1670617777190,"user_tz":-540,"elapsed":3777,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["\n","def load_json(jfile):\n","    data = []\n","    with open(jfile) as f:\n","        for line in f.readlines():\n","            j = json.loads(line)\n","            url, headline, sarcastic = j['article_link'], j['headline'], j['is_sarcastic']\n","            data.append([url, headline, sarcastic])\n","    return pd.DataFrame(data, columns=['article_link', 'headline', 'is_sarcastic'])\n","\n","\n","def load_data_reddit(path):\n","  sarcasm_data = pd.read_csv(path)\n","  print(sarcasm_data.shape)\n","  # sarcasm_data.head()\n","  sarcasm_data.drop(['author', 'subreddit', 'score', 'ups', 'downs', 'date', 'created_utc', 'parent_comment'], axis=1, inplace=True)\n","  # remove empty rows\n","  sarcasm_data.dropna(inplace=True)\n","  # sarcasm_data.head()\n","\n","  mispell_dict = {\"ain't\": \"is not\", \"cannot\": \"can not\", \"aren't\": \"are not\", \"can't\": \"can not\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",\n","                \"doesn't\": \"does not\",\n","                \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\", \"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\",\n","                \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\", \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\", \"I'm\": \"I am\",\n","                \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\", \"i'll've\": \"i will have\", \"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n","                \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\", \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\n","                \"mightn't\": \"might not\", \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\",\n","                \"needn't've\": \"need not have\", \"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\",\n","                \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n","                \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\", \"so's\": \"so as\", \"this's\": \"this is\", \"that'd\": \"that would\",\n","                \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\", \"they'd\": \"they would\",\n","                \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\",\n","                \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\",\n","                \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\", \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\",\n","                \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n","                \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"wont\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\",\n","                \"wouldn't\": \"would not\",\n","                \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\", \"y'all'd've\": \"you all would have\", \"y'all're\": \"you all are\", \"y'all've\": \"you all have\",\n","                \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'colour': 'color',\n","                'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor',\n","                'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What',\n","                'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I',\n","                'theBest': 'the best', 'howdoes': 'how does', 'Etherium': 'Ethereum',\n","                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what',\n","                'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\n","\n","  mispell_dict = {k.lower(): v.lower() for k, v in mispell_dict.items()}\n","\n","  def preprocessing_reddit_text(s):\n","    # making our string lowercase & removing extra spaces\n","    s = str(s).lower().strip()\n","    \n","    # remove contractions.\n","    s = \" \".join([mispell_dict[word] if word in mispell_dict.keys() else word for word in s.split()])\n","    \n","    # removing \\n\n","    s = re.sub('\\n', '', s)\n","    \n","    # put spaces before & after punctuations to make words seprate. Like \"king?\" to \"king\", \"?\".\n","    s = re.sub(r\"([?!,+=—&%\\'\\\";:¿।।।|\\(\\){}\\[\\]//])\", r\" \\1 \", s)\n","    \n","    # Remove more than 2 continues spaces with 1 space.\n","    s = re.sub('[ ]{2,}', ' ', s).strip()\n","    \n","    return s\n","\n","  # apply preprocessing_text function\n","  sarcasm_data['comment'] = sarcasm_data['comment'].apply(preprocessing_reddit_text)\n","  # sarcasm_data.head()\n","\n","  sarcasm_data = sarcasm_data.dropna()\n","\n","  sarcasm_data = sarcasm_data.reset_index(drop=True)\n","  data = sarcasm_data.drop([\"label\"], axis = 1)\n","  label = sarcasm_data.drop([\"comment\"], axis = 1)\n","\n","  return data, label\n","\n","\n","def load_data_headline(path1, path2):\n","  df = load_json(path1)\n","  df2 = load_json(path2)\n","  df.is_sarcastic.value_counts(normalize=True), df.is_sarcastic.value_counts()\n","\n","  frames = [df, df2]  \n","  combine_df = pd.concat(frames)\n","\n","  combine_df.drop(['article_link'], axis=1, inplace=True)\n","  combine_df.dropna(inplace=True)\n","  \n","  mispell_dict = {\"ain't\": \"is not\", \"cannot\": \"can not\", \"aren't\": \"are not\", \"can't\": \"can not\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",\n","                \"doesn't\": \"does not\",\n","                \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\", \"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\",\n","                \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\", \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\", \"I'm\": \"I am\",\n","                \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\", \"i'll've\": \"i will have\", \"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\",\n","                \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\", \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\n","                \"mightn't\": \"might not\", \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\",\n","                \"needn't've\": \"need not have\", \"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\",\n","                \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\",\n","                \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\", \"so's\": \"so as\", \"this's\": \"this is\", \"that'd\": \"that would\",\n","                \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\", \"they'd\": \"they would\",\n","                \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\",\n","                \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\",\n","                \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\", \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\",\n","                \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\",\n","                \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"wont\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\",\n","                \"wouldn't\": \"would not\",\n","                \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\", \"y'all'd've\": \"you all would have\", \"y'all're\": \"you all are\", \"y'all've\": \"you all have\",\n","                \"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'colour': 'color',\n","                'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor',\n","                'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What',\n","                'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I',\n","                'theBest': 'the best', 'howdoes': 'how does', 'Etherium': 'Ethereum',\n","                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what',\n","                'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\n","  \n","  mispell_dict = {k.lower(): v.lower() for k, v in mispell_dict.items()}\n","\n","  def preprocessing_headline_text(s):\n","    # making our string lowercase & removing extra spaces\n","    s = str(s).lower().strip()\n","    \n","    # remove contractions.\n","    s = \" \".join([mispell_dict[word] if word in mispell_dict.keys() else word for word in s.split()])\n","    \n","    # removing \\n\n","    s = re.sub('\\n', '', s)\n","    \n","    # put spaces before & after punctuations to make words seprate. Like \"king?\" to \"king\", \"?\".\n","    s = re.sub(r\"([?!,+=—&%\\'\\\";:¿।।।|\\(\\){}\\[\\]//])\", r\" \\1 \", s)\n","    \n","    # Remove more than 2 continues spaces with 1 space.\n","    s = re.sub('[ ]{2,}', ' ', s).strip()\n","    \n","    return s\n","\n","  # apply preprocessing_text function\n","  combine_df['headline'] = combine_df['headline'].apply(preprocessing_headline_text)\n","  # sarcasm_data.head()\n","\n","  combine_df = combine_df.dropna()\n","\n","  combine_df = combine_df.reset_index(drop=True)\n","  data = combine_df.drop([\"is_sarcastic\"], axis = 1)\n","  label = combine_df.drop([\"headline\"], axis = 1)\n","  \n","  return data, label\n","  \n","\n","reddit_path = \"/content/drive/MyDrive/thesis_datasets/train-balanced-sarcasm.csv\"\n","json_1_headline = '/content/drive/MyDrive/thesis_datasets/Sarcasm_Headlines_Dataset.json'\n","json_2_headline = '/content/drive/MyDrive/thesis_datasets/Sarcasm_Headlines_Dataset_v2.json'\n","\n","reddit_data, reddit_label = load_data_reddit(reddit_path)\n","headline_data, headline_label = load_data_headline(json_1_headline, json_2_headline)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E58m1doU6FRI","executionInfo":{"status":"ok","timestamp":1670617794020,"user_tz":-540,"elapsed":16840,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"c0f9b19f-1417-407a-f83e-77961b7f4cc2"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["(1010826, 10)\n"]}]},{"cell_type":"markdown","source":["**splitting the data**"],"metadata":{"id":"nSxV6ZJNJeM2"}},{"cell_type":"code","source":["print(reddit_data.shape)\n","print(headline_data.shape)\n","print(reddit_label.shape)\n","print(headline_label.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pxBHEw-s6FTa","executionInfo":{"status":"ok","timestamp":1670617794021,"user_tz":-540,"elapsed":8,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"80cf58e7-7088-42fd-e3f2-09f5f5444a7a"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["(1010773, 1)\n","(55328, 1)\n","(1010773, 1)\n","(55328, 1)\n"]}]},{"cell_type":"code","source":["train_text, val_text, train_labels, val_labels = train_test_split(reddit_data, reddit_label, test_size=0.1)"],"metadata":{"id":"uRyh6mbuH-7J","executionInfo":{"status":"ok","timestamp":1670617794021,"user_tz":-540,"elapsed":6,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["\n","y_train =train_labels[\"label\"].to_numpy()\n","y_test = val_labels[\"label\"].to_numpy()\n","type(y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lRYABiqiM-vP","executionInfo":{"status":"ok","timestamp":1670617794021,"user_tz":-540,"elapsed":6,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"70123ad1-4801-4e2e-e7cd-f9a9b270d448"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["numpy.ndarray"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["**Tokenizing the data**"],"metadata":{"id":"zOztdCrUJhL6"}},{"cell_type":"code","source":["# from transformers import RobertaTokenizer, TFRobertaModel\n","import tensorflow as tf\n","from transformers import DistilBertTokenizer, TFDistilBertModel\n","\n","tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')\n","# tokenizer = RobertaTokenizer.from_pretrained('roberta-base')\n","\n","train_dd = list(train_text[\"comment\"])\n","val_dd = list(val_text[\"comment\"])\n","# train_label = list(train_labels[\"label\"])\n","# val_label = list(val_labels[\"label\"])\n","\n","# train_encodings = tokenizer(train_dd, padding=\"max_length\", truncation=True, max_length = 100, return_tensors='tf')\n","# val_encodings = tokenizer(val_dd, padding=\"max_length\", truncation=True, max_length = 100, return_tensors='tf')\n","\n","# train_dataset = tf.data.Dataset.from_tensor_slices((\n","#     dict(train_encodings),\n","#     train_label\n","# ))\n","\n","# val_dataset = tf.data.Dataset.from_tensor_slices((\n","#     dict(val_encodings),\n","#     val_label\n","# ))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":113,"referenced_widgets":["948b704c06314c3393be46492b794f45","bc1f12921be94d638381b3e1e9790df7","40d2a8398fd84ab4aff220829d984cc2","1aac5553a50c437b977886bdbe865384","e4337c706a8d4989a4f8d23df808687f","4e3aa40e0d8b400d84a4ac8eadd55d2c","22262c3e536c4b7eb036019a2e2ad66e","b8347df08df44926ab6b35d56b59aa1e","6d9fb4f84deb4b0ba736c34e8cc963e0","34a88ce7e25c4fefb566a3adc7c4b6ed","c56df3229f7340b4842094ae682dc5cd","c0887566381842eaa04e2aa0a6ef086f","2f82e739afc4444cafdc6d225daae1fd","39c6a5ecd0e94ff1b6b69652b38a30b1","5de703b2050e45258e00a7e3aa3d0db5","1486136d7934482ea7aed82464f3fc7e","8deae203fd8843238f750ce834d92c69","72b3d067b854465f9d1d890da7da3ee8","32d5d0a7a3814759b82ab71e1c3b4707","c53ef5d8f2f6482b97b0b96d2f55cf0d","a9683189319a438daf35364c418faf9b","9d62ae2fb70c42159f97f360068ff71b","912a429e4cda48cf8d9329938b93f202","ab61975341b342eab0002cc5ec64c2f5","a34a0567fade4966a3e773e0b4e5cb47","971a3236112242a6a8561e8dbe2e21cd","c85b954ca400496aa11c6dbc25ba8f4b","53b4e801036842de82d0721f5ff92b42","5f21321955f84a19a7d26bfcb6a54b82","6ff93386c00e4075a43395ad67d40c36","aa310a6893ca4fd692d0d8caa755fd04","95650a6e72fb4d4a8f9111d82f35d524","cfaef0c84e7b4e878f1bf6940f05d8ac"]},"id":"uKTMExz9H-9H","executionInfo":{"status":"ok","timestamp":1670617805012,"user_tz":-540,"elapsed":10994,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"a8bf1286-3570-4ca4-f5af-55a39476735e"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/232k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"948b704c06314c3393be46492b794f45"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/28.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"c0887566381842eaa04e2aa0a6ef086f"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/483 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"912a429e4cda48cf8d9329938b93f202"}},"metadata":{}}]},{"cell_type":"markdown","source":["**Modelling DistilBert**"],"metadata":{"id":"ivQtz3j3KkES"}},{"cell_type":"markdown","source":["# **funtional API**"],"metadata":{"id":"yWpgdxhX2Alx"}},{"cell_type":"code","source":["import tensorflow.keras as keras \n","\n","encoder = TFDistilBertModel.from_pretrained(\"distilbert-base-uncased\")\n","# encoder.trainable = False\n","\n","# def distilbert_encode(texts, tokenizer, max_len=512):\n","#     all_tokens = []\n","#     all_masks = []\n","#     all_segments = []\n","    \n","#     for text in texts:\n","#         text = tokenizer.tokenize(text)\n","#         # text = tokenizer(text, padding=\"max_length\", truncation=True, max_length = max_len, return_tensors='tf')\n","            \n","#         text = text[:max_len-2]\n","#         input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n","#         pad_len = max_len - len(input_sequence)\n","        \n","#         tokens = tokenizer.convert_tokens_to_ids(input_sequence) + [0] * pad_len\n","#         pad_masks = [1] * len(input_sequence) + [0] * pad_len\n","#         segment_ids = [0] * max_len\n","        \n","#         all_tokens.append(tokens)\n","#         all_masks.append(pad_masks)\n","#         all_segments.append(segment_ids)\n","    \n","#     return np.array(all_tokens), np.array(all_masks), np.array(all_segments)\n","\n","def distilbert_encode(texts, tokenizer, max_len=512):\n","    all_tokens = []\n","    \n","    for text in texts:\n","        text = tokenizer.tokenize(text)\n","            \n","        text = text[:max_len-2]\n","        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n","        pad_len = max_len - len(input_sequence)\n","        \n","        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n","        tokens += [0] * pad_len\n","        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n","        segment_ids = [0] * max_len\n","        \n","        all_tokens.append(tokens)\n","    \n","    return np.array(all_tokens)\n","\n","\n","def build_model(distilbert_layer, max_len=512):\n","    # input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n","    # input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n","    # segment_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n","\n","    distilbert_layer.trainable = False\n","    \n","    # sequence_output = distilbert_layer([input_word_ids, input_mask, segment_ids])\n","    # distilbert_layer.trainable = False\n","    # last_hidden_states = sequence_output.last_hidden_state\n","    # print(sequence_output)\n","    # clf_output = last_hidden_states\n","    # clf_output = sequence_output[:, 0, :]\n","    # clf_output = sequence_output[0]\n","    # print(clf_output)\n","\n","    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n","    sequence_output = distilbert_layer(input_word_ids)[0]\n","    # print(sequence_output.shape)\n","    # clf_output = sequence_output[:, 0, :]\n","    # print(sequence_output.shape)\n","    clf_output = sequence_output\n","    # print(clf_output.shape)\n","    # clf_output = sequence_output[0]\n","    # print(clf_output.shape)\n","\n","    net = tf.keras.layers.Bidirectional(keras.layers.GRU(246, return_sequences=True))(clf_output)\n","    net = tf.keras.layers.Dropout(0.3)(net)\n","    net = tf.keras.layers.Bidirectional(keras.layers.GRU(246, return_sequences=True))(net)\n","    net = tf.keras.layers.Dropout(0.1)(net)\n","    net = tf.keras.layers.Bidirectional(keras.layers.GRU(146))(net)\n","    net = tf.keras.layers.Dropout(0.3)(net)\n","    net = tf.keras.layers.Dense(124, activation='relu')(net)\n","    # net = tf.keras.layers.Dropout(0.2)(net)\n","    out = tf.keras.layers.Dense(2, activation='softmax')(net)\n","    \n","    # model = tf.keras.models.Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n","    model = tf.keras.models.Model(inputs=input_word_ids, outputs=out)\n","    model.compile(tf.keras.optimizers.Adam(lr=5e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","    \n","    return model"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":156,"referenced_widgets":["b74b3923f41a4122a1cd8c192e5a5e7b","393ca186fa684b07ab6970e7e613ae0e","39a99a5f5798474c9b10223d6d2c5df1","2505947f6cd441ab8d41ebd1a3062ef9","b3ae031ad57946bc918e917ecffaaf89","6e80145e0665461c86bfe441675c00f5","b125922becd344b491afb7abe7032ae7","cd7f47e6262d4f96b4cb1806897aff04","176ff7802dd84096883864bb2ee524f8","bcdd6803e3724b8e83733032f9546640","39f257fb1b144fa1ac87a0b927b8a1ed"]},"id":"MxtybTQr1_hi","executionInfo":{"status":"ok","timestamp":1670617819073,"user_tz":-540,"elapsed":14069,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"8854c467-2b10-4e06-99c7-29f6cc729a86"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/363M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b74b3923f41a4122a1cd8c192e5a5e7b"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some layers from the model checkpoint at distilbert-base-uncased were not used when initializing TFDistilBertModel: ['activation_13', 'vocab_projector', 'vocab_layer_norm', 'vocab_transform']\n","- This IS expected if you are initializing TFDistilBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFDistilBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","All the layers of TFDistilBertModel were initialized from the model checkpoint at distilbert-base-uncased.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFDistilBertModel for predictions without further training.\n"]}]},{"cell_type":"code","source":["max_len = 100\n","\n","X_train = distilbert_encode(train_dd, tokenizer, max_len=max_len)\n","X_val = distilbert_encode(val_dd, tokenizer, max_len=max_len)"],"metadata":{"id":"BOo7xo0u1_jk","executionInfo":{"status":"ok","timestamp":1670618115486,"user_tz":-540,"elapsed":296422,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# build model\n","max_len = 100\n","model = build_model(encoder, max_len=max_len)\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89WIQJ4G5zKi","executionInfo":{"status":"ok","timestamp":1670618119588,"user_tz":-540,"elapsed":4111,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"8880208d-5390-4377-85b8-a43bacf41a9b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_word_ids (InputLayer)  [(None, 100)]            0         \n","                                                                 \n"," tf_distil_bert_model (TFDis  TFBaseModelOutput(last_h  66362880 \n"," tilBertModel)               idden_state=(None, 100,             \n","                             768),                               \n","                              hidden_states=None, att            \n","                             entions=None)                       \n","                                                                 \n"," bidirectional (Bidirectiona  (None, 100, 492)         1499616   \n"," l)                                                              \n","                                                                 \n"," dropout_19 (Dropout)        (None, 100, 492)          0         \n","                                                                 \n"," bidirectional_1 (Bidirectio  (None, 100, 492)         1092240   \n"," nal)                                                            \n","                                                                 \n"," dropout_20 (Dropout)        (None, 100, 492)          0         \n","                                                                 \n"," bidirectional_2 (Bidirectio  (None, 292)              560640    \n"," nal)                                                            \n","                                                                 \n"," dropout_21 (Dropout)        (None, 292)               0         \n","                                                                 \n"," dense (Dense)               (None, 124)               36332     \n","                                                                 \n"," dense_1 (Dense)             (None, 2)                 250       \n","                                                                 \n","=================================================================\n","Total params: 69,551,958\n","Trainable params: 3,189,078\n","Non-trainable params: 66,362,880\n","_________________________________________________________________\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/keras/optimizers/optimizer_v2/adam.py:110: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n","  super(Adam, self).__init__(name, **kwargs)\n"]}]},{"cell_type":"code","source":["# training\n","\n","%%time\n","checkpoint = tf.keras.callbacks.ModelCheckpoint('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5', monitor='val_accuracy', save_best_only=True, verbose=1)\n","earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=3, verbose=1)\n","\n","train_history = model.fit(\n","    X_train, y_train,\n","    validation_data=(X_val, y_test),\n","    # validation_split=0.1,\n","    epochs=10,\n","    callbacks=[checkpoint, earlystopping],\n","    batch_size=32,\n","    verbose=1\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ifRLPMTw1_m6","outputId":"74aa5876-4324-400b-be15-8be948788e2f","executionInfo":{"status":"ok","timestamp":1669134585205,"user_tz":-540,"elapsed":15329484,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5749 - accuracy: 0.6934\n","Epoch 1: val_accuracy improved from -inf to 0.72082, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1547s 54ms/step - loss: 0.5749 - accuracy: 0.6934 - val_loss: 0.5418 - val_accuracy: 0.7208\n","Epoch 2/10\n","28427/28428 [============================>.] - ETA: 0s - loss: 0.5396 - accuracy: 0.7222\n","Epoch 2: val_accuracy improved from 0.72082 to 0.73827, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1529s 54ms/step - loss: 0.5396 - accuracy: 0.7222 - val_loss: 0.5204 - val_accuracy: 0.7383\n","Epoch 3/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5236 - accuracy: 0.7345\n","Epoch 3: val_accuracy improved from 0.73827 to 0.74575, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1526s 54ms/step - loss: 0.5236 - accuracy: 0.7345 - val_loss: 0.5111 - val_accuracy: 0.7458\n","Epoch 4/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5124 - accuracy: 0.7427\n","Epoch 4: val_accuracy improved from 0.74575 to 0.75205, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1537s 54ms/step - loss: 0.5124 - accuracy: 0.7427 - val_loss: 0.5027 - val_accuracy: 0.7521\n","Epoch 5/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.5035 - accuracy: 0.7486\n","Epoch 5: val_accuracy improved from 0.75205 to 0.75327, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1533s 54ms/step - loss: 0.5035 - accuracy: 0.7486 - val_loss: 0.5024 - val_accuracy: 0.7533\n","Epoch 6/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.4956 - accuracy: 0.7540\n","Epoch 6: val_accuracy improved from 0.75327 to 0.75359, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1535s 54ms/step - loss: 0.4956 - accuracy: 0.7540 - val_loss: 0.4977 - val_accuracy: 0.7536\n","Epoch 7/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.4884 - accuracy: 0.7591\n","Epoch 7: val_accuracy improved from 0.75359 to 0.75827, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1533s 54ms/step - loss: 0.4884 - accuracy: 0.7591 - val_loss: 0.4914 - val_accuracy: 0.7583\n","Epoch 8/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.4814 - accuracy: 0.7644\n","Epoch 8: val_accuracy improved from 0.75827 to 0.75933, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1532s 54ms/step - loss: 0.4814 - accuracy: 0.7644 - val_loss: 0.4921 - val_accuracy: 0.7593\n","Epoch 9/10\n","28428/28428 [==============================] - ETA: 0s - loss: 0.4747 - accuracy: 0.7686\n","Epoch 9: val_accuracy improved from 0.75933 to 0.75964, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1530s 54ms/step - loss: 0.4747 - accuracy: 0.7686 - val_loss: 0.4933 - val_accuracy: 0.7596\n","Epoch 10/10\n","28427/28428 [============================>.] - ETA: 0s - loss: 0.4678 - accuracy: 0.7730\n","Epoch 10: val_accuracy improved from 0.75964 to 0.76176, saving model to /content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5\n","28428/28428 [==============================] - 1526s 54ms/step - loss: 0.4678 - accuracy: 0.7730 - val_loss: 0.4888 - val_accuracy: 0.7618\n","CPU times: user 4h 52min 20s, sys: 35min 14s, total: 5h 27min 35s\n","Wall time: 4h 15min 28s\n"]}]},{"cell_type":"code","source":["# working way of saving model\n","\n","# model.save_weights('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e5/model.h5')"],"metadata":{"id":"se_lBORE8Nz2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%time\n","model.load_weights('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/model_e10_updated/model.h5')\n","y_preds = model.predict(X_val).round().astype(int).argmax(axis=-1)\n","print(\"Validation accuracy: \", sklearn.metrics.accuracy_score(y_test, y_preds))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cvB8C88Q9Hv9","executionInfo":{"status":"ok","timestamp":1670618551281,"user_tz":-540,"elapsed":392789,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"f8cd3d9b-550a-47e1-c197-639162fd0561"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["3159/3159 [==============================] - 388s 121ms/step\n","Validation accuracy:  0.7862343932408635\n","CPU times: user 2min 55s, sys: 22.3 s, total: 3min 17s\n","Wall time: 6min 35s\n"]}]},{"cell_type":"code","source":["# Confusion matrix\n","\n","from sklearn.metrics import confusion_matrix\n","cm = confusion_matrix(y_test, y_preds)\n","cm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5TYWLgAGBdJ9","executionInfo":{"status":"ok","timestamp":1670618702804,"user_tz":-540,"elapsed":1056,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"d143e192-b195-4c5a-ad47-c102d3a436b0"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[40624,  9807],\n","       [11800, 38847]])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test, y_preds, target_names = ['Not Sarcastic','Sarcastic']))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DlvrlHbPmmA5","executionInfo":{"status":"ok","timestamp":1670618674604,"user_tz":-540,"elapsed":637,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"ef9e96f7-d919-4325-abd1-e8512966a90c"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["               precision    recall  f1-score   support\n","\n","Not Sarcastic       0.77      0.81      0.79     50431\n","    Sarcastic       0.80      0.77      0.78     50647\n","\n","     accuracy                           0.79    101078\n","    macro avg       0.79      0.79      0.79    101078\n"," weighted avg       0.79      0.79      0.79    101078\n","\n"]}]},{"cell_type":"code","source":["import seaborn as sns\n","\n","plt.figure(figsize = (15,10))\n","sns.heatmap(cm, cmap= \"Blues\", linecolor = 'black' , linewidth = 1 , annot = True, fmt='')\n","plt.xlabel(\"Predicted\")\n","plt.ylabel(\"Actual\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":623},"id":"X7ZfibNbmmDT","executionInfo":{"status":"ok","timestamp":1670618703313,"user_tz":-540,"elapsed":4,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"dc10131c-0953-474e-c1a9-f46f23f2687f"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(114.0, 0.5, 'Actual')"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[],"metadata":{"id":"hVlO1EvPmmFo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"cMQWzRARmmJG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# y_preds = model.predict(X_val[0])\n","xxx = np.expand_dims(X_val[0], axis=0)\n","print(xxx.shape)\n","# y_preds = model.predict(xxx)\n","# y_preds = model.predict(xxx).round().astype(int).argmax(axis=-1)\n","y_preds.argmax(axis=-1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FDfpmJgM-0TZ","executionInfo":{"status":"ok","timestamp":1668930597104,"user_tz":-540,"elapsed":265,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"38253c78-2169-422b-97b7-59bb9699c87d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 100)\n","1/1 [==============================] - 0s 34ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([1])"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Save the entire model\n","# text_classification_model.save('/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilBert_model_e5/')\n","\n","# it will work\n","model.save(\"/content/full_model.h5\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SzQLw25r0GAX","executionInfo":{"status":"ok","timestamp":1668608536910,"user_tz":-540,"elapsed":26021,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"767acd61-e0fd-4d8a-f3e5-0ee037c2dd9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f01f63e3c50>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f0207a45ad0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f02048f2b90>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f02048e05d0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f02048c92d0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.regularization.dropout.Dropout object at 0x7f0204a2ef50>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.bidirectional.Bidirectional object at 0x7f0207b35c10>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRU object at 0x7f0207b35e50>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRU object at 0x7f0207b3c7d0>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRUCell object at 0x7f0207b35f10>, because it is not built.\n","WARNING:tensorflow:Skipping full serialization of Keras layer <keras.layers.rnn.gru.GRUCell object at 0x7f0207b3c950>, because it is not built.\n","WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, embeddings_layer_call_fn, embeddings_layer_call_and_return_conditional_losses, transformer_layer_call_fn while saving (showing 5 of 166). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"markdown","source":["**Load model**"],"metadata":{"id":"3gzhQn7jhewL"}},{"cell_type":"code","source":[],"metadata":{"id":"d5gklw0Gk3Vq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# model = BertModel.from_pretrained(\"./test/saved_model/\")"],"metadata":{"id":"0m9sG1eba4YA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# imported.predict_on_batch(next(iter(val_dataset.batch(16)))).numpy()\n","# ff = new_model(next(iter(val_dataset.batch(16)))).numpy()\n","# ff.argmax(axis=-1)\n","\n","# next(iter(val_dataset.batch(16)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"gp-NdK4oa4fm","executionInfo":{"status":"error","timestamp":1668501055076,"user_tz":-540,"elapsed":1508,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"e5747139-46dd-4294-c734-cfe2c1b60f7f"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-29-268ddd4147d9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mimported\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_on_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval_dataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m16\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m# ff = new_model(next(iter(val_dataset.batch(16)))).numpy()\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# ff.argmax(axis=-1)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# next(iter(val_dataset.batch(16)))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: '_UserObject' object has no attribute 'predict_on_batch'"]}]},{"cell_type":"code","source":["path = \"/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/weights/\"\n","model = tf.keras.models.load_model(path)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"-Ir185RFa4jG","executionInfo":{"status":"error","timestamp":1668500364772,"user_tz":-540,"elapsed":11195,"user":{"displayName":"Furqan Ali","userId":"08783436873128206665"}},"outputId":"d7b2395a-7623-4a0e-926b-0a9a7d365bc9"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-6f7daa9f9863>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/drive/MyDrive/Colab Notebooks/Thesis and paper_work/distilbert/weights/\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m       \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/saving/saved_model/load.py\u001b[0m in \u001b[0;36mcommon_spec\u001b[0;34m(x, y)\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m       \u001b[0;31m# Please file a bug if you are being hindered by this error.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'No common supertype of {x} and {y}.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: No common supertype of TensorSpec(shape=(None, None), dtype=tf.int64, name=None) and TensorSpec(shape=(None, 100), dtype=tf.int32, name='input_ids/attention_mask')."]}]},{"cell_type":"code","source":[],"metadata":{"id":"_KUOt2yo6FVs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"q_3GYKOK6FYS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"KvRaymJu6Fay"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"nNw1S0Jm6Fc9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"fTSzj1F06FfP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lQSiPFAd6FhN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"URohonso6FjJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"lmXecIhs6Fm9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7EUOOSRn6Fo8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"p6Gq50fr6Fsb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"e8WzNWhjb011"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"OWkoZSuAb05D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6R4oWfbtb07q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"4UtIQhMRb0_I"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"V96zQzWrb1Ep"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"WoKXCCqOb1Ik"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Ko6_zmyTb1L7"},"execution_count":null,"outputs":[]}]}